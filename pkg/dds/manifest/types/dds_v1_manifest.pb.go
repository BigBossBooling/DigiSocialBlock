// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: dds_v1_manifest.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ContentManifestV1 defines the structure for a manifest that lists all
// content chunks and the hash of the original, unchunked content.
// This manifest itself is identified by its own CID.
type ContentManifestV1 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of Content IDs (CIDs) for each chunk of the original content, in order.
	ChunkCids []string `protobuf:"bytes,1,rep,name=chunk_cids,json=chunkCids,proto3" json:"chunk_cids,omitempty"`
	// The SHA-256 hash of the original, complete content before it was chunked.
	// This is used to verify the integrity of the reassembled content.
	// Represented as a hex string or Base58BTC string (to be consistent with CIDs).
	// For now, let's assume hex string for clarity, can be refined.
	OriginalContentHash string `protobuf:"bytes,2,opt,name=original_content_hash,json=originalContentHash,proto3" json:"original_content_hash,omitempty"`
	// Optional: Total size of the original content in bytes.
	// Useful for pre-allocation or progress indication during retrieval.
	OriginalContentSizeBytes int64 `protobuf:"varint,3,opt,name=original_content_size_bytes,json=originalContentSizeBytes,proto3" json:"original_content_size_bytes,omitempty"`
	// Optional: MIME type of the original content.
	OriginalContentMimeType string `protobuf:"bytes,4,opt,name=original_content_mime_type,json=originalContentMimeType,proto3" json:"original_content_mime_type,omitempty"`
	// Optional: Filename of the original content, if applicable.
	OriginalFilename string `protobuf:"bytes,5,opt,name=original_filename,json=originalFilename,proto3" json:"original_filename,omitempty"`
	// Optional: Timestamp (Unix nano) when this manifest was created.
	ManifestCreatedAt int64 `protobuf:"varint,6,opt,name=manifest_created_at,json=manifestCreatedAt,proto3" json:"manifest_created_at,omitempty"`
	// Optional: Custom metadata for the manifest or content.
	CustomMetadata map[string]string `protobuf:"bytes,7,rep,name=custom_metadata,json=customMetadata,proto3" json:"custom_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ContentManifestV1) Reset() {
	*x = ContentManifestV1{}
	mi := &file_dds_v1_manifest_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContentManifestV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentManifestV1) ProtoMessage() {}

func (x *ContentManifestV1) ProtoReflect() protoreflect.Message {
	mi := &file_dds_v1_manifest_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentManifestV1.ProtoReflect.Descriptor instead.
func (*ContentManifestV1) Descriptor() ([]byte, []int) {
	return file_dds_v1_manifest_proto_rawDescGZIP(), []int{0}
}

func (x *ContentManifestV1) GetChunkCids() []string {
	if x != nil {
		return x.ChunkCids
	}
	return nil
}

func (x *ContentManifestV1) GetOriginalContentHash() string {
	if x != nil {
		return x.OriginalContentHash
	}
	return ""
}

func (x *ContentManifestV1) GetOriginalContentSizeBytes() int64 {
	if x != nil {
		return x.OriginalContentSizeBytes
	}
	return 0
}

func (x *ContentManifestV1) GetOriginalContentMimeType() string {
	if x != nil {
		return x.OriginalContentMimeType
	}
	return ""
}

func (x *ContentManifestV1) GetOriginalFilename() string {
	if x != nil {
		return x.OriginalFilename
	}
	return ""
}

func (x *ContentManifestV1) GetManifestCreatedAt() int64 {
	if x != nil {
		return x.ManifestCreatedAt
	}
	return 0
}

func (x *ContentManifestV1) GetCustomMetadata() map[string]string {
	if x != nil {
		return x.CustomMetadata
	}
	return nil
}

var File_dds_v1_manifest_proto protoreflect.FileDescriptor

const file_dds_v1_manifest_proto_rawDesc = "" +
	"\n" +
	"\x15dds_v1_manifest.proto\x12\x0fdds.v1.manifest\"\xe3\x03\n" +
	"\x11ContentManifestV1\x12\x1d\n" +
	"\n" +
	"chunk_cids\x18\x01 \x03(\tR\tchunkCids\x122\n" +
	"\x15original_content_hash\x18\x02 \x01(\tR\x13originalContentHash\x12=\n" +
	"\x1boriginal_content_size_bytes\x18\x03 \x01(\x03R\x18originalContentSizeBytes\x12;\n" +
	"\x1aoriginal_content_mime_type\x18\x04 \x01(\tR\x17originalContentMimeType\x12+\n" +
	"\x11original_filename\x18\x05 \x01(\tR\x10originalFilename\x12.\n" +
	"\x13manifest_created_at\x18\x06 \x01(\x03R\x11manifestCreatedAt\x12_\n" +
	"\x0fcustom_metadata\x18\a \x03(\v26.dds.v1.manifest.ContentManifestV1.CustomMetadataEntryR\x0ecustomMetadata\x1aA\n" +
	"\x13CustomMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01BBZ@github.com/DigiSocialBlock/nexus-protocol/pkg/dds/manifest/typesb\x06proto3"

var (
	file_dds_v1_manifest_proto_rawDescOnce sync.Once
	file_dds_v1_manifest_proto_rawDescData []byte
)

func file_dds_v1_manifest_proto_rawDescGZIP() []byte {
	file_dds_v1_manifest_proto_rawDescOnce.Do(func() {
		file_dds_v1_manifest_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_dds_v1_manifest_proto_rawDesc), len(file_dds_v1_manifest_proto_rawDesc)))
	})
	return file_dds_v1_manifest_proto_rawDescData
}

var file_dds_v1_manifest_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_dds_v1_manifest_proto_goTypes = []any{
	(*ContentManifestV1)(nil), // 0: dds.v1.manifest.ContentManifestV1
	nil,                       // 1: dds.v1.manifest.ContentManifestV1.CustomMetadataEntry
}
var file_dds_v1_manifest_proto_depIdxs = []int32{
	1, // 0: dds.v1.manifest.ContentManifestV1.custom_metadata:type_name -> dds.v1.manifest.ContentManifestV1.CustomMetadataEntry
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_dds_v1_manifest_proto_init() }
func file_dds_v1_manifest_proto_init() {
	if File_dds_v1_manifest_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_dds_v1_manifest_proto_rawDesc), len(file_dds_v1_manifest_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dds_v1_manifest_proto_goTypes,
		DependencyIndexes: file_dds_v1_manifest_proto_depIdxs,
		MessageInfos:      file_dds_v1_manifest_proto_msgTypes,
	}.Build()
	File_dds_v1_manifest_proto = out.File
	file_dds_v1_manifest_proto_goTypes = nil
	file_dds_v1_manifest_proto_depIdxs = nil
}
