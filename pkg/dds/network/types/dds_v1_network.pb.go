// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: dds_v1_network.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Generic Error structure for responses
type Error struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`      // Application-specific error code
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // Human-readable error message
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Error) Reset() {
	*x = Error{}
	mi := &file_dds_v1_network_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_dds_v1_network_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_dds_v1_network_proto_rawDescGZIP(), []int{0}
}

func (x *Error) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// StoreChunkRequest asks a peer to store a chunk.
type StoreChunkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkCid      string                 `protobuf:"bytes,1,opt,name=chunk_cid,json=chunkCid,proto3" json:"chunk_cid,omitempty"`    // CID of the chunk to store
	ChunkData     []byte                 `protobuf:"bytes,2,opt,name=chunk_data,json=chunkData,proto3" json:"chunk_data,omitempty"` // The actual chunk data
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoreChunkRequest) Reset() {
	*x = StoreChunkRequest{}
	mi := &file_dds_v1_network_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoreChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreChunkRequest) ProtoMessage() {}

func (x *StoreChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dds_v1_network_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreChunkRequest.ProtoReflect.Descriptor instead.
func (*StoreChunkRequest) Descriptor() ([]byte, []int) {
	return file_dds_v1_network_proto_rawDescGZIP(), []int{1}
}

func (x *StoreChunkRequest) GetChunkCid() string {
	if x != nil {
		return x.ChunkCid
	}
	return ""
}

func (x *StoreChunkRequest) GetChunkData() []byte {
	if x != nil {
		return x.ChunkData
	}
	return nil
}

// StoreChunkResponse is the response to a StoreChunkRequest.
type StoreChunkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // True if the chunk was stored successfully
	Error         *Error                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`      // Error details if success is false
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoreChunkResponse) Reset() {
	*x = StoreChunkResponse{}
	mi := &file_dds_v1_network_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoreChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreChunkResponse) ProtoMessage() {}

func (x *StoreChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dds_v1_network_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreChunkResponse.ProtoReflect.Descriptor instead.
func (*StoreChunkResponse) Descriptor() ([]byte, []int) {
	return file_dds_v1_network_proto_rawDescGZIP(), []int{2}
}

func (x *StoreChunkResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *StoreChunkResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// RetrieveChunkRequest asks a peer for a specific chunk.
type RetrieveChunkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkCid      string                 `protobuf:"bytes,1,opt,name=chunk_cid,json=chunkCid,proto3" json:"chunk_cid,omitempty"` // CID of the chunk to retrieve
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RetrieveChunkRequest) Reset() {
	*x = RetrieveChunkRequest{}
	mi := &file_dds_v1_network_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetrieveChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveChunkRequest) ProtoMessage() {}

func (x *RetrieveChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dds_v1_network_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveChunkRequest.ProtoReflect.Descriptor instead.
func (*RetrieveChunkRequest) Descriptor() ([]byte, []int) {
	return file_dds_v1_network_proto_rawDescGZIP(), []int{3}
}

func (x *RetrieveChunkRequest) GetChunkCid() string {
	if x != nil {
		return x.ChunkCid
	}
	return ""
}

// RetrieveChunkResponse is the response to a RetrieveChunkRequest.
type RetrieveChunkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkData     []byte                 `protobuf:"bytes,1,opt,name=chunk_data,json=chunkData,proto3" json:"chunk_data,omitempty"` // The retrieved chunk data (only if success is true)
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`                     // True if the chunk was retrieved successfully
	Error         *Error                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`                          // Error details if success is false (e.g., chunk not found)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RetrieveChunkResponse) Reset() {
	*x = RetrieveChunkResponse{}
	mi := &file_dds_v1_network_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetrieveChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveChunkResponse) ProtoMessage() {}

func (x *RetrieveChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dds_v1_network_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveChunkResponse.ProtoReflect.Descriptor instead.
func (*RetrieveChunkResponse) Descriptor() ([]byte, []int) {
	return file_dds_v1_network_proto_rawDescGZIP(), []int{4}
}

func (x *RetrieveChunkResponse) GetChunkData() []byte {
	if x != nil {
		return x.ChunkData
	}
	return nil
}

func (x *RetrieveChunkResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RetrieveChunkResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// FindProvidersRequest asks the DHT (or a peer) for providers of a given CID.
type FindProvidersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cid           string                 `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"` // The CID (can be a chunk_cid or manifest_cid) to find providers for
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindProvidersRequest) Reset() {
	*x = FindProvidersRequest{}
	mi := &file_dds_v1_network_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindProvidersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindProvidersRequest) ProtoMessage() {}

func (x *FindProvidersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dds_v1_network_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindProvidersRequest.ProtoReflect.Descriptor instead.
func (*FindProvidersRequest) Descriptor() ([]byte, []int) {
	return file_dds_v1_network_proto_rawDescGZIP(), []int{5}
}

func (x *FindProvidersRequest) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

// FindProvidersResponse contains a list of Peer IDs that provide the requested CID.
// Peer IDs are typically libp2p Peer IDs in string format.
type FindProvidersResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ProviderPeerIds []string               `protobuf:"bytes,1,rep,name=provider_peer_ids,json=providerPeerIds,proto3" json:"provider_peer_ids,omitempty"` // List of Peer IDs (as strings)
	Error           *Error                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`                                              // Error details if the query failed
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *FindProvidersResponse) Reset() {
	*x = FindProvidersResponse{}
	mi := &file_dds_v1_network_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindProvidersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindProvidersResponse) ProtoMessage() {}

func (x *FindProvidersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dds_v1_network_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindProvidersResponse.ProtoReflect.Descriptor instead.
func (*FindProvidersResponse) Descriptor() ([]byte, []int) {
	return file_dds_v1_network_proto_rawDescGZIP(), []int{6}
}

func (x *FindProvidersResponse) GetProviderPeerIds() []string {
	if x != nil {
		return x.ProviderPeerIds
	}
	return nil
}

func (x *FindProvidersResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// ReplicationInstruction tells a peer to fetch and store a chunk from another source
// (or implies the sender will provide it if source_peer_id is empty).
type ReplicationInstruction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkCid      string                 `protobuf:"bytes,1,opt,name=chunk_cid,json=chunkCid,proto3" json:"chunk_cid,omitempty"`               // CID of the chunk to replicate
	SourcePeerId  string                 `protobuf:"bytes,2,opt,name=source_peer_id,json=sourcePeerId,proto3" json:"source_peer_id,omitempty"` // Optional: Peer ID of a known provider for this chunk
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplicationInstruction) Reset() {
	*x = ReplicationInstruction{}
	mi := &file_dds_v1_network_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicationInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationInstruction) ProtoMessage() {}

func (x *ReplicationInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_dds_v1_network_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationInstruction.ProtoReflect.Descriptor instead.
func (*ReplicationInstruction) Descriptor() ([]byte, []int) {
	return file_dds_v1_network_proto_rawDescGZIP(), []int{7}
}

func (x *ReplicationInstruction) GetChunkCid() string {
	if x != nil {
		return x.ChunkCid
	}
	return ""
}

func (x *ReplicationInstruction) GetSourcePeerId() string {
	if x != nil {
		return x.SourcePeerId
	}
	return ""
}

// ReplicationResponse is the response to a ReplicationInstruction.
type ReplicationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // True if the peer accepted the replication task (doesn't mean immediate completion)
	Error         *Error                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`      // Error details if the instruction was rejected
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplicationResponse) Reset() {
	*x = ReplicationResponse{}
	mi := &file_dds_v1_network_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationResponse) ProtoMessage() {}

func (x *ReplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dds_v1_network_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationResponse.ProtoReflect.Descriptor instead.
func (*ReplicationResponse) Descriptor() ([]byte, []int) {
	return file_dds_v1_network_proto_rawDescGZIP(), []int{8}
}

func (x *ReplicationResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ReplicationResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_dds_v1_network_proto protoreflect.FileDescriptor

const file_dds_v1_network_proto_rawDesc = "" +
	"\n" +
	"\x14dds_v1_network.proto\x12\x0edds.v1.network\"5\n" +
	"\x05Error\x12\x12\n" +
	"\x04code\x18\x01 \x01(\x05R\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"O\n" +
	"\x11StoreChunkRequest\x12\x1b\n" +
	"\tchunk_cid\x18\x01 \x01(\tR\bchunkCid\x12\x1d\n" +
	"\n" +
	"chunk_data\x18\x02 \x01(\fR\tchunkData\"[\n" +
	"\x12StoreChunkResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12+\n" +
	"\x05error\x18\x02 \x01(\v2\x15.dds.v1.network.ErrorR\x05error\"3\n" +
	"\x14RetrieveChunkRequest\x12\x1b\n" +
	"\tchunk_cid\x18\x01 \x01(\tR\bchunkCid\"}\n" +
	"\x15RetrieveChunkResponse\x12\x1d\n" +
	"\n" +
	"chunk_data\x18\x01 \x01(\fR\tchunkData\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12+\n" +
	"\x05error\x18\x03 \x01(\v2\x15.dds.v1.network.ErrorR\x05error\"(\n" +
	"\x14FindProvidersRequest\x12\x10\n" +
	"\x03cid\x18\x01 \x01(\tR\x03cid\"p\n" +
	"\x15FindProvidersResponse\x12*\n" +
	"\x11provider_peer_ids\x18\x01 \x03(\tR\x0fproviderPeerIds\x12+\n" +
	"\x05error\x18\x02 \x01(\v2\x15.dds.v1.network.ErrorR\x05error\"[\n" +
	"\x16ReplicationInstruction\x12\x1b\n" +
	"\tchunk_cid\x18\x01 \x01(\tR\bchunkCid\x12$\n" +
	"\x0esource_peer_id\x18\x02 \x01(\tR\fsourcePeerId\"\\\n" +
	"\x13ReplicationResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12+\n" +
	"\x05error\x18\x02 \x01(\v2\x15.dds.v1.network.ErrorR\x05errorBAZ?github.com/DigiSocialBlock/nexus-protocol/pkg/dds/network/typesb\x06proto3"

var (
	file_dds_v1_network_proto_rawDescOnce sync.Once
	file_dds_v1_network_proto_rawDescData []byte
)

func file_dds_v1_network_proto_rawDescGZIP() []byte {
	file_dds_v1_network_proto_rawDescOnce.Do(func() {
		file_dds_v1_network_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_dds_v1_network_proto_rawDesc), len(file_dds_v1_network_proto_rawDesc)))
	})
	return file_dds_v1_network_proto_rawDescData
}

var file_dds_v1_network_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_dds_v1_network_proto_goTypes = []any{
	(*Error)(nil),                  // 0: dds.v1.network.Error
	(*StoreChunkRequest)(nil),      // 1: dds.v1.network.StoreChunkRequest
	(*StoreChunkResponse)(nil),     // 2: dds.v1.network.StoreChunkResponse
	(*RetrieveChunkRequest)(nil),   // 3: dds.v1.network.RetrieveChunkRequest
	(*RetrieveChunkResponse)(nil),  // 4: dds.v1.network.RetrieveChunkResponse
	(*FindProvidersRequest)(nil),   // 5: dds.v1.network.FindProvidersRequest
	(*FindProvidersResponse)(nil),  // 6: dds.v1.network.FindProvidersResponse
	(*ReplicationInstruction)(nil), // 7: dds.v1.network.ReplicationInstruction
	(*ReplicationResponse)(nil),    // 8: dds.v1.network.ReplicationResponse
}
var file_dds_v1_network_proto_depIdxs = []int32{
	0, // 0: dds.v1.network.StoreChunkResponse.error:type_name -> dds.v1.network.Error
	0, // 1: dds.v1.network.RetrieveChunkResponse.error:type_name -> dds.v1.network.Error
	0, // 2: dds.v1.network.FindProvidersResponse.error:type_name -> dds.v1.network.Error
	0, // 3: dds.v1.network.ReplicationResponse.error:type_name -> dds.v1.network.Error
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_dds_v1_network_proto_init() }
func file_dds_v1_network_proto_init() {
	if File_dds_v1_network_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_dds_v1_network_proto_rawDesc), len(file_dds_v1_network_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dds_v1_network_proto_goTypes,
		DependencyIndexes: file_dds_v1_network_proto_depIdxs,
		MessageInfos:      file_dds_v1_network_proto_msgTypes,
	}.Build()
	File_dds_v1_network_proto = out.File
	file_dds_v1_network_proto_goTypes = nil
	file_dds_v1_network_proto_depIdxs = nil
}
